package kz.app.appstore.service.impl;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import kz.app.appstore.entity.Order;
import kz.app.appstore.enums.OrderStatus;
import kz.app.appstore.enums.PaymentStatus;
import kz.app.appstore.repository.OrderRepository;
import kz.app.appstore.repository.PaymentRepository;
import kz.app.appstore.service.PayPalWebhookService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.security.PublicKey;
import java.security.Signature;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Base64;
import java.util.Optional;

@Service
@Slf4j
public class PayPalWebhookServiceImpl implements PayPalWebhookService {
    private final ObjectMapper objectMapper;
    private final OrderRepository orderRepository;
    private final PaymentRepository paymentRepository;

    @Value("${paypal.webhook-id}")
    private String webhookId;

    public PayPalWebhookServiceImpl(ObjectMapper objectMapper, OrderRepository orderRepository, PaymentRepository paymentRepository) {
        this.objectMapper = objectMapper;
        this.orderRepository = orderRepository;
        this.paymentRepository = paymentRepository;
    }

    @Override
    public ResponseEntity<String> handleWebhook(String body,
                                                String transmissionId,
                                                String transmissionTime,
                                                String transmissionSig,
                                                String certUrl,
                                                String authAlgo) {
        try {
            // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
            String expectedSignatureData = transmissionId + "|" + transmissionTime + "|" + webhookId + "|" + body;

            PublicKey publicKey = getPaypalPublicKey(certUrl);
            Signature signature = Signature.getInstance(authAlgo);
            signature.initVerify(publicKey);
            signature.update(expectedSignatureData.getBytes(StandardCharsets.UTF_8));
            boolean isValid = signature.verify(Base64.getDecoder().decode(transmissionSig));

            if (!isValid) {
                log.warn("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞");
                return ResponseEntity.status(403).body("Invalid signature");
            }

            // ‚úÖ –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∏ –ø–æ–ª—É—á–∞–µ–º orderId
            JsonNode jsonNode = objectMapper.readTree(body);
            String eventType = jsonNode.get("event_type").asText(); // –Ω–∞–ø—Ä–∏–º–µ—Ä: CHECKOUT.ORDER.SAVED
            String paypalOrderId = jsonNode.get("resource").get("id").asText(); // –Ω–∞–ø—Ä: 9NK63094MA726991F

            // üîé –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ –∫–æ–¥—É (–µ—Å–ª–∏ —Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–ª orderCode = paypalOrderId)
            Optional<Order> optionalOrder = orderRepository.findByOrderCode(paypalOrderId);
            if (optionalOrder.isEmpty()) {
                log.warn("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", paypalOrderId);
                return ResponseEntity.ok("No action needed");
            }

            Order order = optionalOrder.get();

            // üßæ –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å
            switch (eventType) {
//                case "CHECKOUT.ORDER.SAVED" -> order.setStatus(OrderStatus.CREATED);
                case "CHECKOUT.ORDER.APPROVED" -> order.setPayStatus(OrderStatus.CONFIRMED);
                case "PAYMENT.CAPTURE.COMPLETED" -> order.setPayStatus(OrderStatus.DELIVERED);
                case "PAYMENT.CAPTURE.DENIED" -> order.setPayStatus(OrderStatus.CANCELLED);
                default -> log.info("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {}", eventType);
            }

            orderRepository.save(order);
            log.info("‚úÖ –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –∑–∞–∫–∞–∑ {} —Ç–µ–ø–µ—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {}", paypalOrderId, order.getPayStatus());
            return ResponseEntity.ok("Webhook processed");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞", e);
            return ResponseEntity.status(500).body("Internal error");
        }
    }


    private PublicKey getPaypalPublicKey(String certUrl) throws Exception {
        URL url = new URL(certUrl);
        CertificateFactory factory = CertificateFactory.getInstance("X.509");
        try (InputStream in = url.openStream()) {
            X509Certificate certificate = (X509Certificate) factory.generateCertificate(in);
            return certificate.getPublicKey();
        }
    }
}
